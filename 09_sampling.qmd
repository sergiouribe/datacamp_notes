---
title: "09_sampling"
format: html
editor: visual
---

```{r}
pacman::p_load(tidyverse)
```

```{r}
# Take a random sample of 100 penguins
penguins_sample <- penguins %>%
  slice_sample(n = 100)

# Calculate the mean body mass (in kg) from the full population
mean_mass_pop <- penguins %>%
  summarise(mean_body_mass_kg = mean(body_mass, na.rm = TRUE) / 1000)

# Calculate the mean body mass (in kg) from the sample
mean_mass_samp <- penguins_sample %>%
  summarise(mean_body_mass_kg = mean(body_mass, na.rm = TRUE) / 1000)

# See the results
mean_mass_pop

```

```{r}
mean_mass_samp
```

```{r}
# rm(mean_mass_pop, mean_mass_samp)
```

```{r}
penguins |> 
  select(body_mass) |> 
  slice_sample(n = 100) |> 
  summarise(mean(body_mass, na.rm = T))
```

```{r}
penguins |> 
  select(body_mass) |> 
  slice_sample(n = 100) |> 
  summarise(sd(body_mass, na.rm = T))
```

```{r}
penguins |> 
  select(body_mass) |> 
  slice_sample(n = 10) |> 
  summarise(mean(body_mass, na.rm = T))
```

```{r}
penguins |> 
  select(body_mass) |> 
  slice_sample(n = 10) |> 
  summarise(sd(body_mass, na.rm = T))
```

```{r}
penguins |> 
  select(body_mass) |> 
  slice_sample(n = 300) |> 
  ggplot(aes(x = body_mass)) + 
  geom_histogram(binwidth = 200) +
  geom_vline(aes(xintercept = mean(body_mass, na.rm = TRUE)), 
             color = "black", linetype = "dashed", linewidth = 1) +
  labs(title = "Histogram of Body Mass (g) with Mean Line")
```

```{r}
penguins |> 
  select(body_mass) |> 
  slice_sample(n = 30) |> 
  ggplot(aes(x = body_mass)) + 
  geom_histogram(binwidth = 200) +
  geom_vline(aes(xintercept = mean(body_mass, na.rm = TRUE)), 
             color = "black", linetype = "dashed", linewidth = 1) +
  labs(title = "Histogram of Body Mass (g) with Mean Line")
```

## Random numbers

```{r}
# Generate random numbers from ...
randoms <- data.frame(
  # a uniform distribution from -3 to 3
  uniform = runif(5000, min = -3, max =  3),
  # a normal distribution with mean 5 and sd 2
  normal = rnorm(5000, mean = 5, sd = 2)
)
```

```{r}
randoms |>
  pivot_longer(uniform:normal) |> 
  ggplot(aes(x = value, 
             fill = name)) + 
  geom_histogram()  + 
  facet_grid(name ~.) + 
  theme(legend.position = "none")
```

```{r}
set.seed(123)
x <- c(rnorm(5), rnorm(5))
set.seed(123)
y <- rnorm(10)
```

## RECAP

-   **Pseudo-random vs. True Randomness**: True randomness relies on physical processes, such as radioactive decay or atmospheric noise. Pseudo-random numbers, however, are generated algorithmically, based on a seed value, making them faster and more practical for most applications.

-   **Seed Value and Reproducibility**: The seed value initiates the pseudo-random number generation process. By setting a specific seed value using `set.seed()`, you ensure that the same sequence of numbers is generated every time, which is crucial for reproducibility in scientific research and data analysis.

-   **Generating Pseudo-random Numbers in R**: You explored functions like `rnorm()` for generating numbers from a normal distribution. For example, `rnorm(5)` generates five pseudo-random numbers from a normal distribution.

-   **Visualizing Distributions**: Using `ggplot2`, you learned how to visualize the distribution of pseudo-random numbers, enhancing your understanding of statistical distributions and their properties.

Example

```{r}
# Shuffle the rows of penguins and add row IDs
penguins_shuffled <- penguins %>%
  slice_sample(prop = 1) %>%
  rowid_to_column()

# Plot body_mass_g vs. rowid
ggplot(penguins_shuffled, aes(rowid, body_mass)) +
  geom_point() +
  geom_smooth()
```

## Stratified and weigthed random sampling

Tip: using semijoins to filter:

![](images/clipboard-3392166877.png)

![](images/clipboard-3592010481.png)

![](images/clipboard-1165298139.png)

```{r}
# Count number of penguins by species and calculate percent
penguins %>% 
  count(species, sort = TRUE) %>% 
  mutate(percent = 100 * n / sum(n))
```

```{r}
# Use proportional stratified sampling to get 40% of each species group
penguins_strat <- penguins %>% 
  group_by(species) %>% 
  slice_sample(prop = 0.4) %>% 
  ungroup()
```

```{r}
penguins_strat
```

```{r}
# Summarize original penguins dataset
penguins_summary <- penguins %>%
  count(species, island) %>%
  mutate(percent_full = 100 * n / sum(n)) %>%
  select(-n)

# Summarize stratified sample
penguins_strat_summary <- penguins_strat %>%
  count(species, island) %>%
  mutate(percent_strat = 100 * n / sum(n)) %>%
  select(-n)

# Join the two summaries side-by-side
penguins_summary %>%
  full_join(penguins_strat_summary, by = c("species", "island")) |> 
  mutate(diff = percent_full - percent_strat ) |> 
  mutate_if(is.numeric, ~ round(., 1))


```

## recap 2

**Simple Random Sampling** is akin to a lottery draw, where each member of the population has an equal chance of being selected. This method ensures that every possible sample has the same probability of being chosen. You saw how to implement this in R using the slice_sample function, where n specifies the number of items to sample from the dataset.

**Systematic Sampling** involves selecting members from a larger population according to a random starting point and a fixed, periodic interval. This method is useful when dealing with large datasets and provides a simple alternative to random sampling. However, it can introduce bias if the population is not homogeneous. The key steps in R include adding a row ID column with rowid_to_column and then using arithmetic to select rows at regular intervals. For example, to sample every 267th row from a dataset, you could use:

```{r}
penguins_samp <- penguins %>%
  rowid_to_column() %>%
  slice((1:5) * 5)  # Example: pick every 5th row (adjust the number to match your case)
```

```{r}
head(penguins_samp)
```

## Weigthed sample

```{r}
# Sample 400 employees weighted by Island
penguins_weight <- penguins %>%
group_by(island) %>%
slice_sample(n = 60)

penguins_weight
```

COmpare

```{r}
penguins |> 
  ggplot(aes(x = island, y = body_mass, fill = island)) + 
  geom_violin() + 
  geom_boxplot(alpha = 0.5, width = 0.2) + 
  geom_jitter(alpha = .10, width = 0.2) + 
  facet_wrap(~species)
```

```{r}
penguins_weight |> 
  ggplot(aes(x = island, y = body_mass, fill = island)) + 
  geom_violin() + 
  geom_boxplot(alpha = 0.5, width = 0.2) + 
  geom_jitter(alpha = .10, width = 0.2)  + 
  facet_wrap(~species)
```

```{r}
 penguins |> 
   slice_sample(n = 400, weight_by = island) |> 
     ggplot(aes(x = island, y = body_mass, fill = island)) + 
  geom_violin() + 
  geom_boxplot(alpha = 0.5, width = 0.2) + 
  geom_jitter(alpha = .10, width = 0.2)  + 
  facet_wrap(~species)
```

```{r}
 # 1. Original dataset: mean body_mass by species
penguins_summary_full <- penguins %>%
  group_by(species) %>%
  summarize(mean_body_mass_full = mean(body_mass, na.rm = TRUE))

# 2. Sample of 60 rows (simple random sampling)
penguins_sample_60 <- penguins %>%
  slice_sample(n = 60)

penguins_summary_sample_60 <- penguins_sample_60 %>%
  group_by(species) %>%
  summarize(mean_body_mass_sample_60 = mean(body_mass, na.rm = TRUE))

# 3. Weighted sample (more weight to heavier penguins)
penguins_with_weights <- penguins %>%
  filter(!is.na(body_mass)) %>%
  mutate(weight = body_mass / sum(body_mass))

penguins_sample_weighted <- penguins_with_weights %>%
  slice_sample(n = 60, weight_by = weight)

penguins_summary_sample_weighted <- penguins_sample_weighted %>%
  group_by(species) %>%
  summarize(mean_body_mass_weighted = mean(body_mass, na.rm = TRUE))

penguins_summary_all <- penguins_summary_full %>%
  left_join(penguins_summary_sample_60, by = "species") %>%
  left_join(penguins_summary_sample_weighted, by = "species") %>%
  mutate_if(is.numeric, ~ round(., 1))

# 5. View the combined table
penguins_summary_all


```

```{r}
# 1. Original full dataset
penguins_full <- penguins %>%
  mutate(sample_type = "Full Dataset")

# 2. Random sample of 60 penguins
penguins_sample_60 <- penguins %>%
  slice_sample(n = 60) %>%
  mutate(sample_type = "Random Sample (60)")

# 3. Weighted sample of 60 penguins
penguins_with_weights <- penguins %>%
  filter(!is.na(body_mass)) %>%
  mutate(weight = body_mass / sum(body_mass))

penguins_sample_weighted <- penguins_with_weights %>%
  slice_sample(n = 60, weight_by = weight) %>%
  mutate(sample_type = "Weighted Sample (60)")

# 4. Combine all datasets
penguins_all <- bind_rows(
  penguins_full,
  penguins_sample_60,
  penguins_sample_weighted
)

# 5. Create the violin plot
penguins_all %>%
  filter(!is.na(body_mass)) %>%
  ggplot(aes(x = species, y = body_mass, fill = sample_type)) +
  geom_violin(position = position_dodge(width = 0.8), trim = FALSE) +
  geom_boxplot(alpha = 0.5) + 
  labs(
    title = "Distribution of Body Mass by Species and Sampling Method",
    x = "Species",
    y = "Body Mass (g)",
    fill = "Sample Type"
  ) +
  theme_minimal()
```

## Cluster sampling

The main benefit of cluster sampling over stratified sampling is that you can save time or money by not including every subgroup in your sample.

![](images/clipboard-2895803311.png)

![](images/clipboard-2237486178.png)

![![](images/clipboard-2464283811.png)](images/clipboard-2503248034.png)
