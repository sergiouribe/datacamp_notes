---
title: "05_join_data"
format: html
editor: visual
---

```{r}
pacman::p_load(tidyverse, 
               nycflights13)
```

![](images/clipboard-972881036.png)

```{r}
themes <- data.frame(
  id = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
  name = c("Technic", "Arctic Technic", "Competition", "Expert Builder", "Model", 
           "Airport", "Construction", "Farm", "Fire", "Harbor"),
  parent_id = c(NA, 1, 1, 1, 1, 5, 5, 5, 5, 5)
)
```

## inner_join

**also to explore the hierarchy inside the dataset!!**

```{r}
# Join themes to itself again to find the grandchild relationships
themes %>% 
  inner_join(themes, by = c("id" = "parent_id"), suffix = c("_parent", "_child")) %>%
  inner_join(themes, by = c("id_child" = "parent_id"), suffix = c("_parent", "_grandchild"))
```

## left_join

## right_join

```{r}
parts %>%
  count(part_cat_id) %>%
  right_join(part_categories, by = c("part_cat_id" = "id")) %>%
  # Use replace_na to replace missing values in the n column
  replace_na(list(n = 0))
```

## full_join

![](images/clipboard-4192618178.png)

```{r}
# Start with inventory_parts_joined table
inventory_parts_joined %>%
  # Combine with the sets table 
  inner_join(sets, by = "set_num") %>%
  # Combine with the themes table
  inner_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme"))
```

## Count with weight

```{r}
# Count the part number and color id, weight by quantity
batman %>%
  count(part_num, color_id, wt = quantity)

star_wars %>%
  count(part_num, color_id, wt = quantity)
```

## replace_na

```{r}
batman_parts %>%
  # Combine the star_wars_parts table 
  full_join(star_wars_parts, by = "color_id", suffix = c("_batman", "_star_wars") ) %>%
  # Replace NAs with 0s in the n_batman and n_star_wars columns 
  replace_na(list(n_batman = 0, n_star_wars = 0))
```

### Exercise

![](images/clipboard-3758483078.png)

## RECAP

-   **Full Join**: You discovered how to use a full join to combine all observations from two tables, regardless of whether they match. This is useful when you want to see all data from both tables side by side, filling in missing values with NAs where there is no match.

-   **Semi and Anti Joins**: While not detailed in the exercises, understanding that semi-joins return all rows from the first table where there are matching values in the second table, and anti-joins return all rows from the first table where there are not matching values in the second table, is crucial for data analysis.

-   **Practical Application**: You applied these concepts to compare LEGO sets and themes, specifically Batman and Star Wars. This involved joining different tables to gather comprehensive data on the LEGO pieces, including their colors and quantities.

-   **Data Aggregation**: You learned to aggregate data to count part numbers and color IDs, weighted by quantity, for both Batman and Star Wars themes. This step is essential for summarizing data before making comparisons.

-   **Combining Data for Comparison**:

    ```         
    batman_parts %>%
      full_join(star_wars_parts, by = c("part_num", "color_id"), suffix = c("_batman", "_star_wars")) %>%
      replace_na(list(n_batman = 0, n_star_wars = 0))
    ```

    This code snippet demonstrates how to combine aggregated data from two themes using a full join, and then replace NA values with zeros for easier comparison.

-   **Enhancing Data Interpretability**: Finally, you enhanced the interpretability of your data by joining additional tables that provide descriptive names for part numbers and color IDs, allowing for a more meaningful comparison between the Batman and Star Wars LEGO themes.

MUTATING JOINS: add columns

FILTERING JOINS: dont add columns

## Filtering joins

![](images/clipboard-1905726842.png)

![![](images/clipboard-3481947105.png)](images/clipboard-2554156545.png)

## Visualizing  set differences

![![](images/clipboard-2457449103.png)](images/clipboard-1241158724.png)
