---
title: "06_stats"
format: html
editor: visual
---

```{r}
pacman::p_load(tidyverse, here, janitor)
```

# Stats

**Descriptive**: describe and summarize data

**Inferential**: use a sample data to make inferences about a larger population

## Types of data

**Numeric** (quantative): continuos or discrete

**Categorical** (qualitative): nominal or ordinal

## Measures of center

-   mean,

-   median,

-   mode

```{r}
mean(sleep_data$sleep_hours)
median(sleep_data$sleep_hours)
```

## Measures of spread

-   variance, sd (penalize longer distances), mean absolute deviation (MAD) (dont penalize longer distance)

-   quartiles, quantile, IQR

#### **EXCERCISES**

1.  Load the dataset and explore its structure.

    ```{r}
    data("mtcars")
    ```

    ```{r}
    glimpse(mtcars)
    ```

2.  Compute summary statistics for the `mpg` (miles per gallon) variable.

    ```{r}
    summary(mtcars$mpg)
    ```

3.  Compute the mean, median, and mode of `mpg`.

    ```{r}
    mean(mtcars$mpg)

    ```

    ```{r}
    median(mtcars$mpg)
    ```

4.  Compute the variance, standard deviation, and interquartile range (IQR) for `mpg`.

```{r}
var(mtcars$mpg)
```

```{r}
sd(mtcars$mpg)
```

```{r}
IQR(mtcars$mpg)
```

```{r}
mtcars |> 
  ggplot(aes(x = mpg)) + 
  geom_histogram(bins = 10)
```

```{r}
# Binomial Distribution Problem: Project Winning Probability

# Probability of winning a project: 0.3
p <- 0.3
# Number of projects per week: 3
n_week <- 3

# Probability of winning 0, 1, 2, or 3 projects in a week
week_probs <- dbinom(0:3, size = n_week, prob = p)
week_probs

# Expected number of projects won in a week
expected_week <- n_week * p
expected_week

# Variance and standard deviation for a week
var_week <- n_week * p * (1 - p)
sd_week <- sqrt(var_week)
var_week
sd_week

# Extending to daily and yearly calculations
n_day <- n_week / 7  # Average projects per day
n_year <- n_week * 52  # Total projects per year

# Expected number of projects won per day and per year
expected_day <- n_day * p
expected_year <- n_year * p

expected_day
expected_year

# Variance and standard deviation for a year
var_year <- n_year * p * (1 - p)
sd_year <- sqrt(var_year)

var_year
sd_year

# CENTRAL THEORY LIMIT

# Simulate a population: number of decayed teeth per patient (skewed distribution)
set.seed(123)
population_size <- 10000
decayed_teeth <- rexp(population_size, rate = 1/2)  # Exponential distribution, mean = 2

# Create a data frame
population_df <- data.frame(decayed_teeth = decayed_teeth)

# EXERCISE 1: Take one random sample of 30 patients
sample_1 <- sample(decayed_teeth, size = 30, replace = TRUE)
mean_sample_1 <- mean(sample_1)
cat("Mean of one sample (n=30):", mean_sample_1, "\n")

# Plot population distribution
ggplot(population_df, aes(x = decayed_teeth)) +
  geom_histogram(binwidth = 0.3, fill = "lightblue", color = "black") +
  labs(title = "Population: Decayed Teeth per Patient",
       x = "Number of Decayed Teeth", y = "Count")

# EXERCISE 2: Repeat sampling 1000 times with sample size 30
sample_means_30 <- replicate(1000, mean(sample(decayed_teeth, size = 30, replace = TRUE)))
sample_means_df_30 <- data.frame(sample_mean = sample_means_30)

# Plot sampling distribution for n = 30
ggplot(sample_means_df_30, aes(x = sample_mean)) +
  geom_histogram(binwidth = 0.1, fill = "lightgreen", color = "black") +
  labs(title = "Sampling Distribution of the Mean (n = 30)",
       x = "Sample Mean", y = "Frequency")

# Compare population and sample mean
cat("Population mean:", mean(decayed_teeth), "\n")
cat("Mean of sample means (n=30):", mean(sample_means_30), "\n")

# EXERCISE 3: Larger sample sizes
sample_means_100 <- replicate(1000, mean(sample(decayed_teeth, size = 100, replace = TRUE)))
sample_means_500 <- replicate(1000, mean(sample(decayed_teeth, size = 500, replace = TRUE)))

# Combine into one data frame for faceted plotting
sample_means_df <- bind_rows(
  data.frame(sample_mean = sample_means_30, sample_size = "n = 30"),
  data.frame(sample_mean = sample_means_100, sample_size = "n = 100"),
  data.frame(sample_mean = sample_means_500, sample_size = "n = 500")
)

# Faceted plot for different sample sizes
ggplot(sample_means_df, aes(x = sample_mean)) +
  geom_histogram(binwidth = 0.1, fill = "lightcoral", color = "black") +
  facet_wrap(~sample_size, scales = "free_y") +
  labs(title = "Sampling Distribution for Different Sample Sizes",
       x = "Sample Mean", y = "Frequency")
